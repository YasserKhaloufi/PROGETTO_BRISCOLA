/* Costruttore che a partire da un Element in cui è contenuto
   un oggetto serializzato di questo tipo 
   restituisce l'oggetto corrispondente*/
public Oggetto(Element e)
{
    /* //Esempio di parsing
        nome = XMLserializer.parseTagName(e, "nome");
        numero = Integer.parseInt(XMLserializer.parseTagName(e, "numero"));

        // Nel caso in cui servisse ricavare il contenuto di un attribute invece che un tag:
        // ... = XMLserializer.parseAttribute(e, [nome attributo]);
    */ 
}

// Per rendere facile la serializzazione di liste di oggetti di questo tipo
public Element serialize(Document d) {

    // 1.Crei per ogni attributo un Element usando "d"
    // 2.Esegue le opportune append
    // 3.Ritorni l'Element finale (non devi farne l'append al "d", di quello se 
    //   ne occuperà il metodo che ha chiamato questa funzione)

    /*Esempio: 
    Element elementoProdotto = d.createElement("Prodotto");
    Element elementoNome = d.createElement("nome"); elementoNome.appendChild(d.createTextNode(nome));
    
    Element elementoPrezzo = d.createElement("prezzo"); elementoPrezzo.appendChild(d.createTextNode(String.valueOf(prezzo)));
    
    Element elementoQta = d.createElement("qta");

    elementoProdotto.appendChild(elementoNome);
    elementoProdotto.appendChild(elementoPrezzo); */

    return elemento;
}

// Potrebbe servire ritornare un Document invece che un element, ad esempio quando vuoi scrivere l'oggetto subito su file
public Document serialize() throws ParserConfigurationException
    {
        DocumentBuilderFactory f = DocumentBuilderFactory.newInstance();
        DocumentBuilder b = f.newDocumentBuilder();
        Document d = b.newDocument();

        Element root = d.createElement("Oggetto");
     
        root.appendChild(serialize(d));
        //Element elementoTotale = d.createElement("totale"); elementoTotale.appendChild(d.createTextNode(String.valueOf(totale))); root.appendChild(elementoTotale);
        
        d.appendChild(root);

        return d;   
    }