using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading.Tasks;
using System.Xml;

namespace Client
{
    public class Server
    {
        public static String IP { get; set; }
        public static int Port { get; set; }

        // INSERISCI QUI LE EVENTUALI LISTE RAM (che verranno iniziallizzare grazie ad un messaggio del server contenente la lista serializzata)
        // public static List<Oggetto> lista { get; set; }

        // Se non usi lo stesso UDP client per invio e ricezione non funziona
        public static UdpClient client = new UdpClient();


        // Esempio
        public static void config()
        {
		
            String PDU= "<config attr='...'></config>";
            invia(PDU);

            String risposta = ricevi();

            // Inizializzo la lista
            lista = parseOggetti(risposta);
        }

	public static String Add(Oggetto p, ...)
        {

            String PDU = "<add>" + p.toXML() + "</add>";

            // INVIO
            invia(PDU);

            // ATTENDO LA RISPOSTA
            String risposta = ricevi();

            return risposta;
        }


        public static void exit()
        {
            String PDU = "<exit>" + "</exit>";

            // INVIO
            invia(PDU);
        }

        private static void invia(String PDU)
        {
            //creazione oggetto UdpClient ed invio del messaggio
            byte[] data = Encoding.ASCII.GetBytes(PDU);
            client.Send(data, data.Length, IP, Port);
        }
        
        private static String ricevi()
        {
            String risposta = "";

            //Ricezione di un pacchetto dalla stessa porta associata durante UdpClient client = new UdpClient();
            IPEndPoint riceveEP = new IPEndPoint(IPAddress.Any, Port);

            //dentro riceveEP  troverete ( dopo la Receive ) l'indirizzo e la porta del mittente ( server ) 
            byte[] dataReceived = client.Receive(ref riceveEP);
            risposta = Encoding.ASCII.GetString(dataReceived);


            return risposta;
        }

        private static List<Oggetto> parseLista(String risposta)
        {
            List<Prodotto> ls = new List<Oggetto>();
            //TO DO:
            XmlDocument doc = new XmlDocument();
            doc.LoadXml(risposta);

            // Se la lista Ã¨ vuota, il server restituisce un xml con solo tag null
            if(doc.GetElementsByTagName("null").Count == 0)
            {
                XmlNodeList XMLlistino = doc.GetElementsByTagName("Oggetto");

                foreach (XmlNode p in XMLlistino)
                {
                    Prodotto prodotto = new Prodotto(XMLNode);
                    ls.Add(prodotto);
                }
            }

            return ls;
        }

    }
}
