// Costruttore 
public Oggetto(XmlNode n)
{
	//Esempio parsing:
	/* 
	nome = p.SelectSingleNode("nome").InnerText;
	prezzo = float.Parse(p.SelectSingleNode("prezzo"), CultureInfo.InvariantCulture);
	...
	*/
}


// to XML con dichiarazione
public String serialize()
        {
            String message = "";
            XmlSerializer serializer = new XmlSerializer(this.GetType());  
            StringWriter sw = new StringWriter();
            XmlWriter xw = XmlWriter.Create(sw);
            serializer.Serialize(xw, this);
            message = sw.ToString();
            return message;
        }

// to XML senza dichiarazione
public String toXML()
        {
            String xmlString = "";
            XmlSerializer serializer = new XmlSerializer(this.GetType()); //Crea un serializzatore per questa classe
            StringWriter sw = new StringWriter();

            /* 
            * Non mi servono la dichiarazione XML e i namespaces nella
            * mia stringa XML (più che altro non mi piacciono),
            * rimuoverli potrebbe portare a dei problemi, questo se effettuassi
            * la deserializzazione lato server in maniera automatica, ma tanto
            * la effettuo a mano...
            * 
            * Quindi personalizzo l'xml writer definendo le seguenti impostazioni
            */
            XmlWriterSettings settings = new XmlWriterSettings();

            /*
            * La seguente opzione serve a permettere di scrivere un singolo frammento di XML
            * invece che scriverlo tutto (cioè con tanto di dichiarazione), cosicchè io
            * possa scrivere solo la parte che mi serve (ovvero <Prodotto>...</Prodotto>
            */
            settings.ConformanceLevel = ConformanceLevel.Fragment;

            settings.Indent = true; // non sono sicuro che questo attivi effettivamente l'indentazione

            /* L'XMLWriter serve a scrivere una stringa in formato xml,
            * scrivendo all'interno di uno stringwriter, è anche possibile utilizzare impostazioni specifiche */
            using (XmlWriter xw = XmlWriter.Create(sw, settings))
            {
                // Definisco dei namespace nulli
                XmlSerializerNamespaces ns = new XmlSerializerNamespaces();
                ns.Add("", ""); // In modo tale da ometterli (verranno scritti vuoti)

                /*
                * Siccome vogliamo scrivere solamente il frammento dell'XML contenente i dati da inviare, l'XMLWriter si aspetta che la prima cosa 
                * che viene scritta sia un elemento (ben formato) o un commento, di conseguenza la dichiarazione non è più considerata un costrutto valido:
                * 
                * <Elemento [eventuali attributi=""]>...</Elemento>  {SI}
                * <!-- Commento -->                                  {SI}
                * <?xml version="1.0" encoding="utf-16"?>            {NO}
                * 
                * Tuttavia quando il metodo Serialize del Serializer viene chiamato, la prima cosa
                * che prova a fare è proprio scrivere la dichiarazione all'inzio del documento, questo non è permesso quando il ConformanceLevel è 
                * settato a fragment, quindi parte un eccezione.
                * Per evitare che il serializer tenti di scrivere la dichiarazione e quindi evitare l'eccezione,
                * bisogna che il writer esegui la prima operazione di scrittura, per questo motivo prima di chiamare serialize scrivo uno spazio vuoto.
                */
                xw.WriteWhitespace("");

                serializer.Serialize(xw, this, ns);
            }

            xmlString = sw.ToString();
            return xmlString;
        }